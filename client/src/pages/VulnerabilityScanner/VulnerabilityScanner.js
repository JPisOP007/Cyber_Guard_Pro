import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  TextField,
  Grid,
  Chip,
  LinearProgress,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Tooltip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from '@mui/material';
import {
  PlayArrow as PlayIcon,
  Stop as StopIcon,
  Refresh as RefreshIcon,
  Download as DownloadIcon,
  Security as SecurityIcon,
  Warning as WarningIcon,
  Error as ErrorIcon,
  Info as InfoIcon,
  CheckCircle as CheckCircleIcon,
} from '@mui/icons-material';
import { useQuery } from 'react-query';

import { scanAPI } from '../../services/api';
import { useSocket } from '../../context/SocketContext';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const VulnerabilityScanner = () => {
  const { startVulnerabilityScan, stopVulnerabilityScan, scanUpdates } = useSocket();
  
  const [scanConfig, setScanConfig] = useState({
    target: '',
    scanType: 'basic',
    ports: '',
    timeout: 300,
  });
  
  const [currentScan, setCurrentScan] = useState(null);
  const [showResults, setShowResults] = useState(false);
  const [selectedScan, setSelectedScan] = useState(null);

  // Fetch scan history with fallback
  const { data: scanHistory = [], isLoading, refetch } = useQuery(
    'scan-history',
    () => scanAPI.getScans({ limit: 20 }),
    {
      select: (response) => {
        // Ensure we always return an array
        console.log('Scan history response:', response);
        
        if (response?.data?.data?.scans && Array.isArray(response.data.data.scans)) {
          return response.data.data.scans;
        }
        if (response?.data?.data && Array.isArray(response.data.data)) {
          return response.data.data;
        }
        if (response?.data?.scans && Array.isArray(response.data.scans)) {
          return response.data.scans;
        }
        return [];
      },
      refetchInterval: 30000,
      retry: 2,
      onError: (error) => {
        console.error('Failed to fetch scan history:', error);
      },
      // Provide a fallback in case of errors
      onSuccess: (data) => {
        console.log('Scan history loaded successfully:', data);
      },
    }
  );

  useEffect(() => {
    // Update current scan status from socket updates
    if (scanUpdates.length > 0) {
      const latestUpdate = scanUpdates[0];
      
      // If we have a current scan, update its progress
      if (currentScan && latestUpdate.scanId === currentScan.scanId) {
        if (latestUpdate.type === 'completed' || latestUpdate.status === 'completed') {
          setCurrentScan(null);
          refetch(); // Refresh scan history
        } else if (latestUpdate.type === 'failed' || latestUpdate.status === 'failed') {
          setCurrentScan(null);
          refetch(); // Refresh scan history
        } else {
          // Update progress
          setCurrentScan(prev => ({
            ...prev,
            progress: latestUpdate.progress || prev.progress,
            status: latestUpdate.status || prev.status
          }));
        }
      }
      
      // If no current scan but we have a running scan update, set it
      if (!currentScan && latestUpdate.status === 'running') {
        setCurrentScan({
          scanId: latestUpdate.scanId,
          target: latestUpdate.targets?.[0] || latestUpdate.target || 'Unknown',
          type: latestUpdate.scanType || 'unknown',
          status: latestUpdate.status,
          progress: latestUpdate.progress || 0
        });
      }
    }
  }, [scanUpdates, currentScan, refetch]);

  const handleStartScan = async () => {
    if (!scanConfig.target.trim()) {
      alert('Please enter a target to scan');
      return;
    }

    try {
      // Use API directly instead of WebSocket for starting scans
      const targetValue = scanConfig.target.trim();
      // Detect if target is a web URL or domain
      const isWebTarget = /^https?:\/\//.test(targetValue) || /^[\w.-]+\.[a-zA-Z]{2,}$/.test(targetValue);
      const scanTypes = isWebTarget
        ? ['port', 'vulnerability', 'web']
        : ['port', 'vulnerability'];

      // Use longer timeout for web scans
      const timeoutMs = isWebTarget ? 120000 : scanConfig.timeout * 1000;

      const scanData = {
        targets: [targetValue],
        scanType: scanConfig.scanType === 'basic' ? 'quick' : 
                 scanConfig.scanType === 'comprehensive' ? 'full' :
                 scanConfig.scanType === 'stealth' ? 'targeted' :
                 scanConfig.scanType === 'aggressive' ? 'full' : 'quick',
        config: {
          scanTypes,
          intensity: scanConfig.scanType === 'aggressive' ? 'aggressive' :
                    scanConfig.scanType === 'stealth' ? 'light' : 'normal',
          timeout: timeoutMs,
          ...(scanConfig.ports && { customPorts: scanConfig.ports }),
        }
      };

      const response = await scanAPI.startScan(scanData);

      if (response.data.success) {
        setCurrentScan({
          scanId: response.data.data.scanId,
          target: targetValue,
          type: scanConfig.scanType,
          status: 'starting',
          progress: 0,
        });

        console.log('Scan started successfully:', response.data.data.scanId);
        // The WebSocket will handle real-time updates
      }
    } catch (error) {
      console.error('Failed to start scan:', error);
      alert('Failed to start scan: ' + (error.response?.data?.message || error.message));
    }
  };

  const handleStopScan = async () => {
    if (currentScan?.scanId) {
      try {
        const response = await scanAPI.stopScan(currentScan.scanId);
        if (response.data.success) {
          setCurrentScan(null);
          refetch(); // Refresh scan history
        }
      } catch (error) {
        console.error('Failed to stop scan:', error);
        alert('Failed to stop scan: ' + (error.response?.data?.message || error.message));
      }
    }
  };

  const handleViewResults = (scan) => {
    setSelectedScan(scan);
    setShowResults(true);
  };

  const getSeverityIcon = (severity) => {
    switch (severity) {
      case 'Critical':
        return <ErrorIcon color="error" />;
      case 'High':
        return <WarningIcon color="warning" />;
      case 'Medium':
        return <InfoIcon color="info" />;
      case 'Low':
        return <CheckCircleIcon color="success" />;
      default:
        return <InfoIcon />;
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'Critical':
        return 'error';
      case 'High':
        return 'warning';
      case 'Medium':
        return 'info';
      case 'Low':
        return 'success';
      default:
        return 'default';
    }
  };

  if (isLoading) {
    return <LoadingSpinner message="Loading scan data..." />;
  }

  return (
    <Box>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" component="h1" sx={{ fontWeight: 'bold' }}>
          Vulnerability Scanner
        </Typography>
        <IconButton onClick={refetch}>
          <RefreshIcon />
        </IconButton>
      </Box>

      <Grid container spacing={3}>
        {/* Scan Configuration */}
        <Grid item xs={12} lg={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                New Scan Configuration
              </Typography>
              
              <TextField
                fullWidth
                label="Target (IP/Domain)"
                placeholder="192.168.1.1 or example.com"
                value={scanConfig.target}
                onChange={(e) => setScanConfig(prev => ({ ...prev, target: e.target.value }))}
                sx={{ mb: 2 }}
                name="target"
                inputProps={{ 'data-testid': 'scan-target-input' }}
              />
              
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>Scan Type</InputLabel>
                <Select
                  value={scanConfig.scanType}
                  onChange={(e) => setScanConfig(prev => ({ ...prev, scanType: e.target.value }))}
                  name="scanType"
                  data-testid="scan-type-select"
                >
                  <MenuItem value="basic">Basic Scan</MenuItem>
                  <MenuItem value="comprehensive">Comprehensive Scan</MenuItem>
                  <MenuItem value="stealth">Stealth Scan</MenuItem>
                  <MenuItem value="aggressive">Aggressive Scan</MenuItem>
                </Select>
              </FormControl>
              
              <TextField
                fullWidth
                label="Custom Ports (Optional)"
                placeholder="80,443,8080-8090"
                value={scanConfig.ports}
                onChange={(e) => setScanConfig(prev => ({ ...prev, ports: e.target.value }))}
                sx={{ mb: 2 }}
              />
              
              <TextField
                fullWidth
                type="number"
                label="Timeout (seconds)"
                value={scanConfig.timeout}
                onChange={(e) => setScanConfig(prev => ({ ...prev, timeout: parseInt(e.target.value) }))}
                sx={{ mb: 3 }}
              />
              
              {currentScan ? (
                <Box>
                  <Typography variant="body2" sx={{ mb: 1 }}>
                    Scanning: {currentScan.target}
                  </Typography>
                  <Typography variant="caption" color="textSecondary" sx={{ mb: 2, display: 'block' }}>
                    Status: {currentScan.status} â€¢ {Math.round(currentScan.progress || 0)}% complete
                  </Typography>
                  <LinearProgress 
                    variant="determinate" 
                    value={currentScan.progress || 0} 
                    sx={{ 
                      mb: 2, 
                      height: 8, 
                      borderRadius: 4,
                      backgroundColor: 'grey.200',
                      '& .MuiLinearProgress-bar': {
                        borderRadius: 4,
                      }
                    }}
                  />
                  <Button
                    fullWidth
                    variant="outlined"
                    color="error"
                    startIcon={<StopIcon />}
                    onClick={handleStopScan}
                  >
                    Cancel Scan
                  </Button>
                </Box>
              ) : (
                <Button
                  fullWidth
                  variant="contained"
                  startIcon={<PlayIcon />}
                  onClick={handleStartScan}
                  disabled={!scanConfig.target.trim()}
                >
                  Start Scan
                </Button>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Scan History */}
        <Grid item xs={12} lg={8}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Scan History
              </Typography>
              
              {!scanHistory || !Array.isArray(scanHistory) || scanHistory.length === 0 ? (
                <Box sx={{ textAlign: 'center', py: 4 }}>
                  <SecurityIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
                  <Typography variant="h6" color="textSecondary" gutterBottom>
                    No scans yet
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    Start your first vulnerability scan to see results here.
                  </Typography>
                </Box>
              ) : (
                <List>
                  {Array.isArray(scanHistory) ? scanHistory.map((scan) => (
                    <ListItem
                      key={scan._id}
                      sx={{
                        border: 1,
                        borderColor: 'divider',
                        borderRadius: 2,
                        mb: 2,
                        '&:hover': {
                          backgroundColor: 'action.hover',
                        },
                      }}
                      data-testid="scan-history-item"
                    >
                      <ListItemIcon>
                        <SecurityIcon color="primary" />
                      </ListItemIcon>
                      
                      <ListItemText
                        primary={
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Typography variant="subtitle1" sx={{ fontWeight: 500 }}>
                              {scan.target || (scan.targets && scan.targets[0]) || 'Unknown Target'}
                            </Typography>
                            <Chip
                              size="small"
                              label={scan.status}
                              color={scan.status === 'completed' ? 'success' : 
                                    scan.status === 'failed' ? 'error' : 'info'}
                            />
                          </Box>
                        }
                        secondary={
                          <Box>
                            <Typography variant="body2" color="textSecondary">
                              {scan.createdAt && (typeof scan.createdAt === 'string' || typeof scan.createdAt === 'number') && !isNaN(new Date(scan.createdAt).getTime())
                                ? new Date(scan.createdAt).toLocaleString('en-US', {
                                    year: 'numeric', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit'
                                  })
                                : 'Date unavailable'}
                            </Typography>
                            {scan.vulnerabilities && Array.isArray(scan.vulnerabilities) && (
                              <Box sx={{ mt: 1, display: 'flex', gap: 1 }}>
                                {Object.entries(scan.vulnerabilities.reduce((acc, vuln) => {
                                  acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
                                  return acc;
                                }, {})).map(([severity, count]) => (
                                  <Chip
                                    key={severity}
                                    size="small"
                                    label={`${severity}: ${count}`}
                                    color={getSeverityColor(severity)}
                                    variant="outlined"
                                  />
                                ))}
                              </Box>
                            )}
                          </Box>
                        }
                      />
                      
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                        {scan.status === 'completed' && (
                          <Button
                            size="small"
                            onClick={() => handleViewResults(scan)}
                          >
                            View Results
                          </Button>
                        )}
                        
                        <Tooltip title="Download Report">
                          <IconButton size="small">
                            <DownloadIcon />
                          </IconButton>
                        </Tooltip>
                      </Box>
                    </ListItem>
                  )) : null}
                </List>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Results Dialog */}
      <Dialog
        open={showResults}
        onClose={() => setShowResults(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          Scan Results: {selectedScan?.target}
        </DialogTitle>
        <DialogContent>
          {selectedScan?.vulnerabilities && Array.isArray(selectedScan.vulnerabilities) && selectedScan.vulnerabilities.length > 0 ? (
            <List>
              {selectedScan.vulnerabilities.map((vuln, index) => (
                <ListItem key={index} sx={{ border: 1, borderColor: 'divider', borderRadius: 1, mb: 1 }}>
                  <ListItemIcon>
                    {getSeverityIcon(vuln.severity)}
                  </ListItemIcon>
                  <ListItemText
                    primary={vuln.name || vuln.title}
                    secondary={
                      <Box>
                        <Typography variant="body2" sx={{ mt: 1 }}>
                          {vuln.description}
                        </Typography>
                        {vuln.cvss && (
                          <Typography variant="caption" color="textSecondary">
                            CVSS Score: {vuln.cvss}
                          </Typography>
                        )}
                        {vuln.solution && (
                          <Typography variant="caption" color="primary" sx={{ display: 'block', mt: 1 }}>
                            Solution: {vuln.solution}
                          </Typography>
                        )}
                      </Box>
                    }
                  />
                  <Chip
                    label={vuln.severity}
                    color={getSeverityColor(vuln.severity)}
                    size="small"
                  />
                </ListItem>
              ))}
            </List>
          ) : (
            <Typography variant="body1" sx={{ textAlign: 'center', py: 4 }}>
              No vulnerabilities found - your system appears secure!
            </Typography>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowResults(false)}>Close</Button>
          <Button
            variant="contained"
            startIcon={<DownloadIcon />}
            onClick={() => {
              if (!selectedScan) return;
              const dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(selectedScan, null, 2));
              const downloadAnchorNode = document.createElement('a');
              downloadAnchorNode.setAttribute('href', dataStr);
              downloadAnchorNode.setAttribute('download', `scan-report-${selectedScan.scanId || 'report'}.json`);
              document.body.appendChild(downloadAnchorNode);
              downloadAnchorNode.click();
              downloadAnchorNode.remove();
            }}
          >
            Download Report
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default VulnerabilityScanner;