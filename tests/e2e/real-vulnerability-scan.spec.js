const { test, expect } = require('@playwright/test');

test.describe('Real Vulnerability Scanning Tests', () => {
  test.beforeEach(async ({ page }) => {
    test.setTimeout(300000); // 5 minutes for real network scanning
    
    await page.goto('http://localhost:3000', { waitUntil: 'domcontentloaded' });
    
    // Handle authentication if needed
    try {
      await page.waitForURL(/.*\/login/, { timeout: 5000 });
      
      await page.fill('input[name="email"], input[type="email"]', 'demo@cyberguard.com');
      await page.fill('input[name="password"], input[type="password"]', 'demo123');
      await page.click('button:has-text("Sign In"), button[type="submit"]');
      
      await page.waitForURL(/.*\/dashboard/, { timeout: 20000 });
      console.log('✓ Authenticated successfully');
    } catch (error) {
      console.log('No authentication needed or already authenticated');
    }
    
    // Ensure page is loaded
    await page.waitForLoadState('networkidle');
  });

  test('should perform real network vulnerability scan on localhost', async ({ page }) => {
    console.log('🔍 Starting real localhost vulnerability scan...');
    
    // Navigate using proper selector
    await page.locator('text=Vulnerability Scanner').click();
    await page.waitForURL(/.*\/vulnerability-scanner/);
    
    // Wait for page to load
    await expect(page.locator('h1, h2, h3, h4').filter({ hasText: /vulnerability.*scanner/i })).toBeVisible();
    console.log('✓ Scanner page loaded');
    
    // Record initial state
    await page.locator('text=Dashboard').click();
    await expect(page.locator('[data-testid="vulnerability-count"]')).toBeVisible();
    const initialVulnCount = await page.locator('[data-testid="vulnerability-count"]').textContent();
    console.log('📊 Initial vulnerability count:', initialVulnCount);
    
    // Return to scanner
    await page.locator('text=Vulnerability Scanner').click();
    
    // Configure real network scan
    await page.fill('[data-testid="scan-target-input"]', '127.0.0.1');
    console.log('✓ Target set to 127.0.0.1');
    
    // Select scan type using Material-UI approach
    await page.locator('[data-testid="scan-type-select"]').click();
    await page.locator('li[data-value="comprehensive"], li:has-text("Comprehensive Scan")').click();
    console.log('✓ Comprehensive scan type selected');
    
    // Initiate real vulnerability scan
    await page.locator('button:has-text("Start Scan")').click();
    console.log('🚀 Real vulnerability scan initiated...');
    
    // Monitor real scan progress
    let scanMetrics = {
      started: false,
      progressUpdates: [],
      portsScanned: 0,
      vulnerabilitiesFound: 0,
      scanDuration: 0
    };
    
    const scanStart = Date.now();
    
    try {
      // Wait for scan to actually start
      await expect(page.locator('text=Scanning: 127.0.0.1')).toBeVisible({ timeout: 30000 });
      scanMetrics.started = true;
      console.log('✅ Real scan started successfully');
      
      // Monitor progress and collect real-time updates
      const progressMonitor = async () => {
        const maxScanTime = 180000; // 3 minutes max
        const startTime = Date.now();
        
        while (Date.now() - startTime < maxScanTime) {
          try {
            // Check for progress percentage
            const progressText = await page.locator('text=/\\d+%.*complete/i').textContent({ timeout: 2000 });
            if (progressText && !scanMetrics.progressUpdates.includes(progressText)) {
              scanMetrics.progressUpdates.push(progressText);
              console.log('📈 Progress:', progressText);
            }
            
            // Check for port scan updates
            const portInfo = await page.locator('text=/port.*\\d+/i').textContent({ timeout: 1000 }).catch(() => null);
            if (portInfo) {
              console.log('🔌 Port scan info:', portInfo);
            }
            
            // Check if scan completed
            const isCompleted = await page.locator('button:has-text("Start Scan")').isVisible({ timeout: 2000 });
            if (isCompleted) {
              console.log('✅ Scan completed!');
              break;
            }
            
          } catch (e) {
            // Continue monitoring
          }
          
          await page.waitForTimeout(3000); // Check every 3 seconds
        }
      };
      
      await progressMonitor();
      
      // Final wait for completion
      await expect(page.locator('button:has-text("Start Scan")')).toBeVisible({ timeout: 60000 });
      
      scanMetrics.scanDuration = Date.now() - scanStart;
      console.log(`⏱️ Scan completed in ${scanMetrics.scanDuration / 1000}s`);
      
      // Verify scan results recorded
      await expect(page.locator('[data-testid="scan-history-item"]').first()).toBeVisible({ timeout: 15000 });
      console.log('✓ Scan results recorded in history');
      
      // Check for real vulnerability findings
      await page.locator('text=Dashboard').click();
      await page.waitForTimeout(5000); // Allow WebSocket updates
      
      const finalVulnCount = await page.locator('[data-testid="vulnerability-count"]').textContent();
      console.log('📊 Final vulnerability count:', finalVulnCount);
      
      const initialNum = parseInt(initialVulnCount) || 0;
      const finalNum = parseInt(finalVulnCount) || 0;
      scanMetrics.vulnerabilitiesFound = finalNum - initialNum;
      
      // Log comprehensive scan results
      console.log('\n🎯 REAL SCAN RESULTS:');
      console.log(`- Scan Target: 127.0.0.1`);
      console.log(`- Scan Type: Comprehensive`);
      console.log(`- Duration: ${scanMetrics.scanDuration / 1000}s`);
      console.log(`- Progress Updates: ${scanMetrics.progressUpdates.length}`);
      console.log(`- Vulnerabilities Found: ${scanMetrics.vulnerabilitiesFound}`);
      console.log(`- Initial Count: ${initialNum}, Final Count: ${finalNum}`);
      
      // Verify real network scanning occurred
      expect(scanMetrics.started).toBeTruthy();
      expect(scanMetrics.progressUpdates.length).toBeGreaterThan(0);
      expect(scanMetrics.scanDuration).toBeGreaterThan(5000); // Real scan takes time
      
      if (scanMetrics.vulnerabilitiesFound > 0) {
        console.log(`✅ SUCCESS: Found ${scanMetrics.vulnerabilitiesFound} real vulnerabilities`);
      } else {
        console.log('✅ SUCCESS: Comprehensive scan completed (secure target)');
      }
      
    } catch (error) {
      console.error('❌ Scan failed:', error.message);
      throw error;
    }
  });

  test('should perform external network scan with real vulnerability detection', async ({ page }) => {
    console.log('🌐 Testing external target vulnerability scan...');
    
    await page.locator('text=Vulnerability Scanner').click();
    
    // Use a test target that's likely to have some findings
    const testTarget = '8.8.8.8'; // Google DNS - well secured but scannable
    await page.fill('[data-testid="scan-target-input"]', testTarget);
    
    await page.locator('[data-testid="scan-type-select"]').click();
    await page.locator('li[data-value="basic"], li:has-text("Basic Scan")').click();
    
    await page.locator('button:has-text("Start Scan")').click();
    console.log(`🚀 External scan started for ${testTarget}`);
    
    // Monitor external scan
    await expect(page.locator(`text=Scanning: ${testTarget}`)).toBeVisible({ timeout: 20000 });
    console.log('✅ External network scan initiated');
    
    // Wait for completion (external scans may be faster)
    await expect(page.locator('button:has-text("Start Scan")')).toBeVisible({ timeout: 120000 });
    console.log('✅ External scan completed');
    
    // Verify scan recorded
    await expect(page.locator('[data-testid="scan-history-item"]')).toBeVisible();
    console.log('✓ External scan results recorded');
  });

  test('should handle scan cancellation during real network operations', async ({ page }) => {
    console.log('⏹️ Testing scan cancellation during real operations...');
    
    await page.locator('text=Vulnerability Scanner').click();
    
    // Start a potentially longer scan
    await page.fill('[data-testid="scan-target-input"]', '192.168.1.1');
    await page.locator('[data-testid="scan-type-select"]').click();
    await page.locator('li[data-value="comprehensive"], li:has-text("Comprehensive Scan")').click();
    
    await page.locator('button:has-text("Start Scan")').click();
    
    // Wait for scan to start
    await expect(page.locator('text=Scanning: 192.168.1.1')).toBeVisible({ timeout: 20000 });
    console.log('✅ Scan started, testing cancellation...');
    
    // Cancel the scan
    await page.locator('button:has-text("Cancel Scan")').click();
    console.log('🛑 Cancel requested');
    
    // Should return to start state
    await expect(page.locator('button:has-text("Start Scan")')).toBeVisible({ timeout: 30000 });
    console.log('✅ Scan cancelled successfully');
  });

  test('should validate and handle network scan errors gracefully', async ({ page }) => {
    console.log('🚫 Testing error handling with invalid targets...');
    
    await page.locator('text=Vulnerability Scanner').click();
    
    // Test with invalid IP
    await page.fill('[data-testid="scan-target-input"]', '999.999.999.999');
    await page.locator('[data-testid="scan-type-select"]').click();
    await page.locator('li[data-value="basic"], li:has-text("Basic Scan")').click();
    
    await page.locator('button:has-text("Start Scan")').click();
    
    // Should start but fail gracefully
    await expect(page.locator('text=Scanning: 999.999.999.999')).toBeVisible({ timeout: 15000 });
    console.log('✅ Invalid target scan initiated');
    
    // Should complete/fail and return to start state
    await expect(page.locator('button:has-text("Start Scan")')).toBeVisible({ timeout: 60000 });
    console.log('✅ Invalid scan handled gracefully');
  });
});