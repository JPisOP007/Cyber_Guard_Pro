const { test, expect } = require('@playwright/test');

test.describe('Complete Vulnerability Scanner Test', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to app and login
    await page.goto('http://localhost:3000');
    
    // Should redirect to login
    await expect(page).toHaveURL(/.*\/login/);
    
    // Use demo login
    await page.fill('input[type="email"]', 'demo@cyberguard.com');
    await page.fill('input[type="password"]', 'demo123');
    await page.click('button[type="submit"]');
    
    // Wait for redirect to dashboard
    await expect(page).toHaveURL(/.*\/dashboard/);
    console.log('Successfully logged in');
  });

  test('should perform real vulnerability scan with progress tracking', async ({ page }) => {
    console.log('Starting vulnerability scan test...');
    
    // Navigate to vulnerability scanner from sidebar
    await page.click('text=Vulnerability Scanner');
    await expect(page).toHaveURL(/.*\/vulnerability-scanner/);
    await expect(page.locator('h1:has-text("Vulnerability Scanner")')).toBeVisible();
    
    // Get initial dashboard vulnerability count
    await page.click('text=Dashboard');
    await expect(page.locator('[data-testid="vulnerability-count"]')).toBeVisible();
    const initialCount = await page.locator('[data-testid="vulnerability-count"]').textContent();
    console.log('Initial vulnerability count:', initialCount);
    
    // Go back to scanner
    await page.click('text=Vulnerability Scanner');
    
    // Configure scan for localhost (should use network scanning)
    await page.fill('[data-testid="scan-target-input"]', '127.0.0.1');
    await page.selectOption('[data-testid="scan-type-select"]', 'basic');
    
    // Start the scan
    await page.click('button:has-text("Start Scan")');
    console.log('Scan start button clicked');
    
    // Wait for scan to start - should see progress indicator
    await expect(page.locator('text=Scanning: 127.0.0.1')).toBeVisible({ timeout: 15000 });
    console.log('Scan started, monitoring progress...');
    
    // Check progress bar is visible
    await expect(page.locator('.MuiLinearProgress-root')).toBeVisible();
    
    // Monitor progress updates
    let progressSeen = false;
    for (let i = 0; i < 30; i++) { // Check for up to 30 seconds
      const progressText = await page.locator('text=/\\d+%.*complete/i').textContent().catch(() => null);
      if (progressText) {
        console.log('Progress update:', progressText);
        progressSeen = true;
      }
      
      // Check if scan completed
      const startButtonVisible = await page.locator('button:has-text("Start Scan")').isVisible().catch(() => false);
      if (startButtonVisible) {
        console.log('Scan completed!');
        break;
      }
      
      await page.waitForTimeout(1000);
    }
    
    expect(progressSeen).toBeTruthy();
    console.log('Progress tracking verified');
    
    // Wait for final completion (max 2 minutes total)
    await expect(page.locator('button:has-text("Start Scan")')).toBeVisible({ timeout: 120000 });
    console.log('Scan fully completed');
    
    // Verify scan appears in history
    await expect(page.locator('[data-testid="scan-history-item"]')).toBeVisible({ timeout: 10000 });
    console.log('Scan appears in history');
    
    // Check dashboard was updated
    await page.click('text=Dashboard');
    await page.waitForTimeout(2000); // Allow for WebSocket updates
    
    const finalCount = await page.locator('[data-testid="vulnerability-count"]').textContent();
    console.log('Final vulnerability count:', finalCount);
    
    // Verify count increased (real scan should find vulnerabilities on localhost)
    const initialNum = parseInt(initialCount) || 0;
    const finalNum = parseInt(finalCount) || 0;
    expect(finalNum >= initialNum).toBeTruthy();
    
    if (finalNum > initialNum) {
      console.log(`SUCCESS: Found ${finalNum - initialNum} new vulnerabilities`);
    } else {
      console.log('No new vulnerabilities found (acceptable for secure localhost)');
    }
  });

  test('should handle scan cancellation', async ({ page }) => {
    await page.click('text=Vulnerability Scanner');
    
    // Start a scan
    await page.fill('[data-testid="scan-target-input"]', '8.8.8.8');
    await page.selectOption('[data-testid="scan-type-select"]', 'basic');
    await page.click('button:has-text("Start Scan")');
    
    // Wait for scan to start
    await expect(page.locator('text=Scanning: 8.8.8.8')).toBeVisible({ timeout: 15000 });
    console.log('Scan started for cancellation test');
    
    // Cancel the scan
    await page.click('button:has-text("Cancel Scan")');
    console.log('Cancel button clicked');
    
    // Should return to start state
    await expect(page.locator('button:has-text("Start Scan")')).toBeVisible({ timeout: 15000 });
    console.log('Scan cancellation successful');
  });

  test('should perform external target scan', async ({ page }) => {
    await page.click('text=Vulnerability Scanner');
    
    // Test with Google DNS (8.8.8.8) - should complete quickly with minimal findings
    await page.fill('[data-testid="scan-target-input"]', '8.8.8.8');
    await page.selectOption('[data-testid="scan-type-select"]', 'basic');
    
    await page.click('button:has-text("Start Scan")');
    
    // Wait for scan to start
    await expect(page.locator('text=Scanning: 8.8.8.8')).toBeVisible({ timeout: 15000 });
    console.log('External target scan started');
    
    // Should complete (Google DNS is well-secured, may find no vulnerabilities)
    await expect(page.locator('button:has-text("Start Scan")')).toBeVisible({ timeout: 60000 });
    console.log('External scan completed');
    
    // Should still add to history even if no vulnerabilities found
    await expect(page.locator('[data-testid="scan-history-item"]')).toBeVisible();
  });

  test('should validate input requirements', async ({ page }) => {
    await page.click('text=Vulnerability Scanner');
    
    // Try to start scan with empty target
    await page.click('button:has-text("Start Scan")');
    
    // Should see validation error
    await expect(page.locator('text=/please enter a target/i')).toBeVisible({ timeout: 5000 });
    console.log('Input validation working');
  });
});