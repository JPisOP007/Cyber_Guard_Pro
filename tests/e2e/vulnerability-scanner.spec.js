const { test, expect } = require('@playwright/test');

test.describe('Vulnerability Scanner', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the application
    await page.goto('http://localhost:3000');
    
    // Wait for the application to load
    await expect(page).toHaveTitle(/CyberGuard Pro/);
    
    // Navigate to vulnerability scanner
    await page.click('nav a[href*="/vulnerability-scanner"]');
    await expect(page).toHaveURL(/.*\/vulnerability-scanner/);
  });

  test('should display vulnerability scanner interface', async ({ page }) => {
    // Check that the main scanner elements are present
    await expect(page.locator('h1')).toContainText('Vulnerability Scanner');
    
    // Check scan configuration form
    await expect(page.locator('input[name="target"]')).toBeVisible();
    await expect(page.locator('select[name="scanType"]')).toBeVisible();
    await expect(page.getByRole('button', { name: /start scan/i })).toBeVisible();
  });

  test('should start a real vulnerability scan and show progress', async ({ page }) => {
    // Fill in scan configuration with a real target
    await page.fill('input[name="target"]', '127.0.0.1');
    await page.selectOption('select[name="scanType"]', 'basic');
    
    // Start the scan
    await page.getByRole('button', { name: /start scan/i }).click();
    
    // Wait for scan to start - should see progress indicator
    await expect(page.locator('text=Scanning: 127.0.0.1')).toBeVisible({ timeout: 10000 });
    
    // Check that progress bar is visible and updating
    await expect(page.locator('.MuiLinearProgress-root')).toBeVisible();
    
    // Check that scan status is shown
    await expect(page.locator('text=/Status.*complete/i')).toBeVisible({ timeout: 30000 });
    
    // Wait for scan completion (should complete within reasonable time for localhost)
    await expect(page.getByRole('button', { name: /start scan/i })).toBeVisible({ timeout: 60000 });
  });

  test('should cancel a running scan', async ({ page }) => {
    // Start a scan
    await page.fill('input[name="target"]', '127.0.0.1');
    await page.selectOption('select[name="scanType"]', 'basic');
    await page.getByRole('button', { name: /start scan/i }).click();
    
    // Wait for scan to start
    await expect(page.locator('text=Scanning: 127.0.0.1')).toBeVisible({ timeout: 10000 });
    
    // Cancel the scan
    await page.getByRole('button', { name: /cancel scan/i }).click();
    
    // Should return to initial state
    await expect(page.getByRole('button', { name: /start scan/i })).toBeVisible({ timeout: 10000 });
  });

  test('should validate scan target input', async ({ page }) => {
    // Try to start scan with empty target
    await page.getByRole('button', { name: /start scan/i }).click();
    
    // Should see validation message
    await expect(page.locator('text=/please enter a target/i')).toBeVisible();
    
    // Button should be disabled for empty input
    await expect(page.getByRole('button', { name: /start scan/i })).toBeDisabled();
  });

  test('should display scan history after completion', async ({ page }) => {
    // Start and wait for scan completion
    await page.fill('input[name="target"]', '127.0.0.1');
    await page.selectOption('select[name="scanType"]', 'basic');
    await page.getByRole('button', { name: /start scan/i }).click();
    
    // Wait for scan to complete
    await expect(page.locator('text=Scanning: 127.0.0.1')).toBeVisible({ timeout: 10000 });
    await expect(page.getByRole('button', { name: /start scan/i })).toBeVisible({ timeout: 60000 });
    
    // Check scan history section
    await expect(page.locator('h6:has-text("Recent Scans")')).toBeVisible();
    
    // Should have at least one scan entry
    await expect(page.locator('[data-testid="scan-history-item"]').first()).toBeVisible({ timeout: 10000 });
  });

  test('should show vulnerability results in scan details', async ({ page }) => {
    // Start scan and wait for completion  
    await page.fill('input[name="target"]', '127.0.0.1');
    await page.selectOption('select[name="scanType"]', 'basic');
    await page.getByRole('button', { name: /start scan/i }).click();
    
    // Wait for completion
    await expect(page.locator('text=Scanning: 127.0.0.1')).toBeVisible({ timeout: 10000 });
    await expect(page.getByRole('button', { name: /start scan/i })).toBeVisible({ timeout: 60000 });
    
    // Click on scan results to view details
    await page.locator('[data-testid="scan-history-item"]').first().click();
    
    // Should show vulnerability details
    await expect(page.locator('text=/vulnerabilities/i')).toBeVisible();
  });

  test('should update dashboard after scan completion', async ({ page }) => {
    // Navigate to dashboard first to get baseline
    await page.click('nav a[href*="/dashboard"]');
    await expect(page.locator('h1:has-text("Security Dashboard")')).toBeVisible();
    
    // Get initial vulnerability count
    const initialVulnCount = await page.locator('[data-testid="vulnerability-count"]').textContent();
    
    // Go back to scanner and run scan
    await page.click('nav a[href*="/vulnerability-scanner"]');
    await page.fill('input[name="target"]', '127.0.0.1');
    await page.selectOption('select[name="scanType"]', 'basic');
    await page.getByRole('button', { name: /start scan/i }).click();
    
    // Wait for completion
    await expect(page.locator('text=Scanning: 127.0.0.1')).toBeVisible({ timeout: 10000 });
    await expect(page.getByRole('button', { name: /start scan/i })).toBeVisible({ timeout: 60000 });
    
    // Go back to dashboard
    await page.click('nav a[href*="/dashboard"]');
    
    // Dashboard should refresh and show updated vulnerability count
    await expect(page.locator('[data-testid="vulnerability-count"]')).not.toHaveText(initialVulnCount, { timeout: 15000 });
  });

  test('should handle network connectivity scans for real targets', async ({ page }) => {
    // Test with a real external target (Google DNS)
    await page.fill('input[name="target"]', '8.8.8.8');
    await page.selectOption('select[name="scanType"]', 'basic');
    
    // Start scan
    await page.getByRole('button', { name: /start scan/i }).click();
    
    // Should start scanning
    await expect(page.locator('text=Scanning: 8.8.8.8')).toBeVisible({ timeout: 10000 });
    
    // Should eventually complete (may find fewer vulnerabilities on well-secured target)
    await expect(page.getByRole('button', { name: /start scan/i })).toBeVisible({ timeout: 90000 });
  });

  test('should show appropriate scan progress updates', async ({ page }) => {
    // Start a comprehensive scan for more progress steps
    await page.fill('input[name="target"]', '127.0.0.1');
    await page.selectOption('select[name="scanType"]', 'comprehensive');
    await page.getByRole('button', { name: /start scan/i }).click();
    
    // Should show scanning status
    await expect(page.locator('text=Scanning: 127.0.0.1')).toBeVisible({ timeout: 10000 });
    
    // Should show progress percentage
    await expect(page.locator('text=/%.*complete/i')).toBeVisible({ timeout: 15000 });
    
    // Progress bar should be visible and updating
    const progressBar = page.locator('.MuiLinearProgress-bar');
    await expect(progressBar).toBeVisible();
    
    // Wait for completion
    await expect(page.getByRole('button', { name: /start scan/i })).toBeVisible({ timeout: 120000 });
  });

  test('should handle scan configuration changes', async ({ page }) => {
    // Test different scan types
    await page.selectOption('select[name="scanType"]', 'stealth');
    await expect(page.locator('select[name="scanType"]')).toHaveValue('stealth');
    
    await page.selectOption('select[name="scanType"]', 'aggressive');
    await expect(page.locator('select[name="scanType"]')).toHaveValue('aggressive');
    
    // Test custom ports field (if available)
    const portsField = page.locator('input[name="ports"]');
    if (await portsField.isVisible()) {
      await portsField.fill('80,443,22');
      await expect(portsField).toHaveValue('80,443,22');
    }
    
    // Test timeout configuration (if available)
    const timeoutField = page.locator('input[name="timeout"]');
    if (await timeoutField.isVisible()) {
      await timeoutField.fill('180');
      await expect(timeoutField).toHaveValue('180');
    }
  });
});

test.describe('Vulnerability Scanner WebSocket Integration', () => {
  test('should receive real-time scan updates', async ({ page }) => {
    // Listen for WebSocket messages
    const messages = [];
    page.on('websocket', ws => {
      ws.on('framereceived', event => {
        try {
          const data = JSON.parse(event.payload);
          if (data.type || data.scanId) {
            messages.push(data);
          }
        } catch (e) {
          // Ignore non-JSON frames
        }
      });
    });
    
    await page.goto('http://localhost:3000');
    await page.click('nav a[href*="/vulnerability-scanner"]');
    
    // Start scan
    await page.fill('input[name="target"]', '127.0.0.1');
    await page.getByRole('button', { name: /start scan/i }).click();
    
    // Wait for scan to start and receive WebSocket updates
    await expect(page.locator('text=Scanning: 127.0.0.1')).toBeVisible({ timeout: 10000 });
    
    // Wait a bit for WebSocket messages
    await page.waitForTimeout(5000);
    
    // Should have received scan-related messages
    expect(messages.some(msg => 
      msg.type === 'scan_started' || 
      msg.type === 'scan_progress' || 
      msg.type === 'scan_completed'
    )).toBeTruthy();
  });
});